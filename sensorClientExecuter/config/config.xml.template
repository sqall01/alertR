<?xml version="1.0"?>

<!--
    this is a template configuration file
    please rename this template to "config.xml" if you want to use it
    for the client
-->
<config version="1.000">

    <!--
        in this section general options are configured
    -->
    <general>

        <!--
            the settings for the logfile
            file - absolute path to the logfile
            level - valid log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
        -->
        <log
            file="/absolute/path/to/logfile.log"
            level="INFO" />

        <!--
            the settings for the server
            host - location/address of the server
            port - port that is used by the server
        -->
        <server
            host="server.h4des.org"
            port="12345" />

        <!--
            The settings used for the TLS/SSL connection.
            enabled - Sets if TLS/SSL is used for connections.
                Only disable it for testing purposes and NEVER in a production environment. Has to be set to the same value on each AlertR instance.
        -->
        <ssl
            enabled="True">

            <!--
                The settings for server certificates. Only used if TLS/SSL is enabled.
                caFile - path to the CA file to check the correctness of the used TLS/SSL connection
            -->
            <server
                caFile="/absolute/path/to/server_CA.pem" />

            <!--
                The settings for a client certificate. Only used if TLS/SSL is enabled.
                certificateRequired - sets if it is required for the client
                    to authenticate itself via a certificate or not
                    (if you have the alert system reachable from the internet
                    you should use client certificates)
                    ("True" or "False")
                certFile - path to the certificate file of the client
                    this is used for the TLS/SSL connection
                    (only processed if "certificateRequired" is set to "True")
                keyFile - path to the key file of the client that is used
                    for the TLS/SSL connection
                    (only processed if "certificateRequired" is set to "True")
            -->
            <client
                certificateRequired="True"
                certFile="/absolute/path/to/client.crt"
                keyFile="/absolute/path/to/client.key" />
        </ssl>

        <!--
            user credentials of this client
            (WARNING: have to be unique for each client or strange
            behavior will happen)
            username - the username
            password - the password (thanks cpt obvious ...)
        -->
        <credentials
            username="user"
            password="pass" />

        <!--
            Connection settings.
            persistent - Flag that indicates if this client is considered
                to have a persistant connection to the server. This means
                that if this client disconnects from the server, the server
                will consider this as a fail state and will invoke an alarm.
                ("True" or "False")
        -->
        <connection
            persistent="True" />

    </general>


    <!--
        in this section options for email alerts are configured
    -->
    <smtp>

        <!--
            the general settings of the email notifications
            activated - are email alerts active? ("True" or "False")
            fromAddr - email address from which this email should be sent
            toAddr - email address to which the email should be sent
        -->
        <general
            activated="True"
            fromAddr="alertSystem@h4des.org"
            toAddr="youraddress@somehost.de" />

        <!--
            the server settings of the email notifications
            host - address of the used smtp server
                (only 127.0.0.1 supported at the moment)
            port - port of the used smtp server
        -->
        <server
            host="127.0.0.1"
            port="25" />

    </smtp>


    <!--
        in this section the options of the update process are configured
    -->
    <update>

        <!--
            the server settings of the update process (only change these
                settings if you want to use your own repository and not
                the AlertR master repository on github)
            url - URL to AlertR repository
                NOTE: the update process uses HTTPS and does not allow HTTP
        -->
        <server
            url="https://raw.githubusercontent.com/sqall01/alertR/master/" />

    </update>


    <!--
        section of all sensors that are monitored
    -->
    <sensors>

        <!--
            a single sensor is configured in a "sensor" element
            if you need additional sensors just add a new one
        -->
        <sensor>

            <!--
                the general configuration of a sensor
                id - local id of this sensor (has to be unique on this client)
                description - description of this sensor
                alertDelay - delay after which (when the alert system is still
                    active) the alert should trigger (this is processed
                    by the server and the value here is only used to register
                    with it at the server)
                triggerAlert - this flag indicates if this sensor should
                    trigger an alert for example it could be just used to
                    signal the state to the server and not trigger
                    any alert (regardless of if the alert system is
                    active or not)
                    ("True" or "False")
                triggerAlertNormal - this flag indicates if this sensor should
                    trigger an alert when it goes back to a normal state (and
                    not only if a triggered state is reached and the flag
                    "triggerAlert" is set). If this flag is not set, this
                    client sends only a state change to the server to inform
                    it about the new state.
                    ("True" or "False")
            -->
            <general
                id="0"
                description="example watchdog script part 1"
                alertDelay="0"
                triggerAlert="True"
                triggerAlertNormal="False" />

            <!--
                the alert level that is triggered by the sensor
                (a sensor must have one but can have multiple alert levels)
            -->
            <alertLevel>0</alertLevel>
            <alertLevel>3</alertLevel>

            <!--
                the executer specific settings
                execute - Watchdog script to execute
                    (command/path to execute).
                timeout - The timeout interval in seconds tells the sensor
                    client when the executed script has timed out and
                    therefore a alert has to be triggered.
                intervalToCheck - Interval in seconds in which the service
                    should be tested (has to be larger than the timeout).
                parseOutput - Indicates if the output of the executed
                    command should be parsed (only output on stdout
                    will be parsed, stderr will be ignored). If it
                    should not be parsed, then the exist code of the
                    command is used to determine the sensor state
                    (exist code = 0 => normal; exit code != 0 => triggered).
                    If the output should be parsed, then the command itself
                    determines the state of the sensor by communicating via
                    the used protocol
                    (see https://github.com/sqall01/alertR/wiki/Protocol#protocol_schematics_executer_sensor
                    for the used protocol).
                dataType - Gives the data type of this sensor
                    (0 = none, 1 = int, 2 = float, 3 GPS).
                    Is only used if "parseOutput" is set to "True".
            -->
            <executer
                execute="/absolute/path/to/watchdog_script.sh"
                timeout="5"
                intervalToCheck="10"
                parseOutput="False"
                dataType="0">

                <!--
                    the arguments that the executed script gets passed
                    (can be completely removed if no argument should
                    be passed to the executed watchdog script)
                -->
                <argument>start1</argument>
                <argument>start2</argument>
                <argument>start3</argument>

            </executer>

        </sensor>

        <!--
            a single sensor is configured in a "sensor" element
            if you need additional sensors just add a new one
        -->
        <sensor>

            <!--
                the general configuration of a sensor
                id - local id of this sensor (has to be unique on this client)
                description - description of this sensor
                alertDelay - delay after which (when the alert system is still
                    active) the alert should trigger (this is processed
                    by the server and the value here is only used to register
                    with it at the server)
                triggerAlert - this flag indicates if this sensor should
                    trigger an alert for example it could be just used to
                    signal the state to the server and not trigger
                    any alert (regardless of if the alert system is
                    active or not)
                    ("True" or "False")
                triggerAlertNormal - this flag indicates if this sensor should
                    trigger an alert when it goes back to a normal state (and
                    not only if a triggered state is reached and the flag
                    "triggerAlert" is set). If this flag is not set, this
                    client sends only a state change to the server to inform
                    it about the new state.
                    ("True" or "False")
            -->
            <general
                id="1"
                description="example watchdog script part 2"
                alertDelay="0"
                triggerAlert="True"
                triggerAlertNormal="False" />

            <!--
                the alert level that is triggered by the sensor
                (a sensor must have one but can have multiple alert levels)
            -->
            <alertLevel>0</alertLevel>

            <!--
                the executer specific settings
                execute - Watchdog script to execute
                    (command/path to execute).
                timeout - The timeout interval in seconds tells the sensor
                    client when the executed script has timed out and
                    therefore a alert has to be triggered.
                intervalToCheck - Interval in seconds in which the service
                    should be tested (has to be larger than the timeout).
                parseOutput - Indicates if the output of the executed
                    command should be parsed (only output on stdout
                    will be parsed, stderr will be ignored). If it
                    should not be parsed, then the exist code of the
                    command is used to determine the sensor state
                    (exist code = 0 => normal; exit code != 0 => triggered).
                    If the output should be parsed, then the command itself
                    determines the state of the sensor by communicating via
                    the used protocol
                    (see https://github.com/sqall01/alertR/wiki/Protocol#protocol_schematics_executer_sensor
                    for the used protocol).
                dataType - Gives the data type of this sensor
                    (0 = none, 1 = int, 2 = float, 3 GPS).
                    Is only used if "parseOutput" is set to "True".
            -->
            <executer
                execute="/bin/bash"
                timeout="3"
                intervalToCheck="5"
                parseOutput="True"
                dataType="0">

                <!--
                    the arguments that the executed script gets passed
                    (can be completely removed if no argument should
                    be passed to the executed watchdog script)
                -->
                <argument>/absolute/path/to/watchdog_script2.sh</argument>
                <argument>start1</argument>
                <argument>start2</argument>

            </executer>

        </sensor>

    </sensors>

</config>
