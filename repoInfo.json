{"instances": {"managerClientPrometheus": {"location": "managerClientPrometheus/", "name": "AlertR Manager Client Prometheus", "desc": "This client exposes all sensors holding float or integer data for a Prometheus collector to collect it. This allows to create a time series of the sensor data which can be used, for example, by Grafana to create graph views.", "type": "manager"}, "sensorClientGPS": {"location": "sensorClientGPS/", "name": "AlertR Sensor Client GPS", "desc": "This client handles the GPS position of a device as a sensor. It allows you to build a geofence which triggers an alarm as soon as the device leaves it (or enters it). With this you can build home automation (e.g., turn on the thermostats as soon as I am coming home) as well as alarm systems for movable objects (e.g., car leaves the \"home zone\" in which it normally drives). Currently, only ChasR is supported as GPS provider (https://alertr.de/chasr).", "type": "sensor"}, "sensorClientTemplate": {"location": "sensorClientTemplate/", "name": "AlertR Sensor Client Template", "desc": "This client is solely for developers. It is a template which handles the communication with the server, but does not do any logic as a sensor.", "type": "sensor"}, "alertClientDbus": {"location": "alertClientDbus/", "name": "AlertR Alert Client Dbus", "desc": "This client handles triggered alerts and is written to show a message notification via D-Bus. It works with all window managers that support D-Bus and implement the freedesktop.org specification. For example, you can run it as a service on your workstation and as soon as an event happens (front door opens, door bell rings, service goes down, incoming phone call, and so on) it shows a notification on the display.", "type": "alert"}, "alertClientExecuter": {"location": "alertClientExecuter/", "name": "AlertR Alert Client Executer", "desc": "This client handles triggered sensors and is written to execute a configured script or command with arguments. The arguments are configured and the command is executed on a triggered sensor alert event or when the system profile has changed. This allows you to interact with non-AlertR components or integrate your own code into the AlertR system.", "type": "alert"}, "alertClientMail": {"location": "alertClientMail/", "name": "AlertR Alert Client Mail", "desc": "This client handles triggered sensor alerts and is written to send an eMail to the configured address when it receives a sensor alert. It needs a local SMTP server (like postfix) to send an eMail. For each alert you configure, you can customize the eMail content by using template files. Special keywords will be replaced by information about the received sensor alert.", "type": "alert"}, "alertClientPushNotification": {"location": "alertClientPushNotification/", "name": "AlertR Alert Client Push Notification", "desc": "This client handles triggered sensor alerts and is written to send an end-to-end encrypted push notification on the configured channel when it receives a sensor alert. It needs an account at https://alertr.de and the receiving devices to have the AlertR App installed. For each alert you configure, you can customize the message content by using template files. Special keywords will be replaced by information about the received sensor alert.", "type": "alert"}, "alertClientRaspberryPi": {"location": "alertClientRaspberryPi/", "name": "AlertR Alert Client Raspberry Pi", "desc": "This client handles triggered alerts and is written to set/unset GPIO pins of a Raspberry Pi. This means it gets notified by the server if a sensor was triggered and can set/unset configured GPIO pins, for example, to activate a siren. However, the sensor can also just be used as a switch and the configured alert can switch on and off the configured GPIO pins.", "type": "alert"}, "alertClientTemplate": {"location": "alertClientTemplate/", "name": "AlertR Alert Client Template", "desc": "This client handles triggered alerts and is solely for developers. It is a template which handles the communication with the server, but does not do any logic when a configured alert is triggered.", "type": "alert"}, "alertClientKodi": {"location": "alertClientKodi/", "name": "AlertR Alert Client Kodi", "desc": "This client handles triggered sensors and is written to communicate with Kodi (former XBMC). It can show a message notification on the display and can pause video/audio playback. For example, you can use this client to pause the video/audio playback and show a message notification if someone is ringing the bell at your front door.", "type": "alert"}, "managerClientConsole": {"location": "managerClientConsole/", "name": "AlertR Manager Client Console", "desc": "This client is a manager client for the AlertR system. It shows the current state of all sensors, the connected clients and if the currently active system profile.", "type": "manager"}, "managerClientTemplate": {"location": "managerClientTemplate/", "name": "AlertR Manager Client Template", "desc": "This client stores the state of the AlertR system in local objects to provide a template for developers to build a manager client.", "type": "manager"}, "managerClientKeypad": {"location": "managerClientKeypad/", "name": "AlertR Manager Client Keypad", "desc": "This client manages the state of the AlertR system. It can change the used system profile after you entered a correct PIN. If AlertR is, for example, used in an alarm system context, it can change the used system profile from \"alarm system activated\" to \"alarm system deactivated\" and vice versa. Furthermore, it allows a delayed system profile change allowing you, for example, in an alarm system context to chose \"activate the alarm system in X seconds\" and then leave the building. It is written to work as a client with keypad and small display (original for a Raspbery Pi, but is not limited to it). In an alarm system context, the client should be near an entrance to allow the user to activate/deactivate the alarm system while leaving/entering.", "type": "manager"}, "managerClientDatabase": {"location": "managerClientDatabase/", "name": "AlertR Manager Client Database", "desc": "This client stores the state of the AlertR system in a database for external usage. It uses a MySQL database to store all information about the AlertR system. External components, such as a website, can use the information in the database for their purposes. In the case of a website, it can process the data and show a visualization to the user. In order to let external components interact with the AlertR system, the manager client can set up a local UNIX socket server.", "type": "manager"}, "sensorClientICalendar": {"location": "sensorClientICalendar/", "name": "AlertR Sensor Client iCalendar", "desc": "This client handles calendar services as a sensor. For this, reminders in this calendar are used to trigger sensor alerts. Every calendar service that gives the option to retrieve the calendar data as .ics file via a URL can be used with this sensor client. For example, you can combine this sensor client with your Google calendar to generate sensor alerts every time a reminder is triggered. These sensor alerts can then be instrumented by AlertR to perform a certain task (e.g., display a message on your Kodi media center setup). Furthermore, this allows you to generate a schedule in your calendar which then trigger certain tasks in your AlertR system.", "type": "sensor"}, "sensorClientExecuter": {"location": "sensorClientExecuter/", "name": "AlertR Sensor Client Executer", "desc": "This client handles scripts as sensors and informs the AlertR system if a sensor has triggered and/or the state of a sensor has changed. This means it executes configured scripts in an interval. Each sensor is basically a cronjob for the AlertR system. The sensor has two options to be triggered: 1) The sensor is triggered if the script exits with an exit code not equal to 0 or a timeout. 2) The script outputs that the sensor should be triggered with the help of a well-defined protocol or a timeout (see the developer tutorials for examples). For instance, you can execute a script that checks if the Internet connection is available and which triggers if no Internet connection is up.", "type": "sensor"}, "sensorClientDevelopment": {"location": "sensorClientDevelopment/", "name": "AlertR Sensor Client Development", "desc": "This client is only for developers. It has no purpose than to emulate sensors and to trigger them via keyboard input. This means it can not be used as a daemon and has to be actively used.", "type": "sensor"}, "sensorClientFIFO": {"location": "sensorClientFIFO/", "name": "AlertR Sensor Client FIFO", "desc": "This client is build for the integration of already developed scripts or other software into the AlertR system as a sensor. For each sensor it creates a FIFO file on the file system and monitors it. Other scripts/programs can write into the FIFO file to change the state of the associated sensor. For example, you can use a cronjob to write into the FIFO file at specific times to trigger a sensor event, or the ISC DHCP server can write into the FIFO file each time a client in a specific subnet requests an IP address, or a script can read the temperature of your thermostat periodically and can write it into the FIFO file. The possibilities to use this client to integrate other components into the AlertR system are endless.", "type": "sensor"}, "sensorClientWeatherService": {"location": "sensorClientWeatherService/", "name": "AlertR Sensor Client Weather Service", "desc": "This client is specialized to fetch data from a weather service provider (wunderground.com or darksky.net) and provide the AlertR system with this information.", "type": "sensor"}, "sensorClientPing": {"location": "sensorClientPing/", "name": "AlertR Sensor Client Ping", "desc": "This client is specialized to just ping a server as a sensor and informing the AlertR system if a host is reachable or not. The sensor is triggered if the server is not reachable or a timeout occur.", "type": "sensor"}, "sensorClientRaspberryPi": {"location": "sensorClientRaspberryPi/", "name": "AlertR Sensor Client Raspberry Pi", "desc": "This client handles Raspberry Pi GPIO pins as sensors. It either polls the state of a GPIO pin or uses an interrupt on a falling/rising edge and triggers an alert if the state has changed/interrupt has occurred (or a state change if it goes back from a state in which it triggers an alert to a normal state). This means it notifies the server if an alert was triggered by a sensor. A sensor connected to the GPIO pin can be anything you like, for example, a PIR (Passive InfraRed) sensor, a magnetic switch on a window, a water leak alarm sensor, a smoke detector and so on. Furthermore, this client also supports DS18B20 temperature sensors.", "type": "sensor"}, "server": {"location": "server/", "name": "AlertR Server", "desc": "The server handles the logic of the AlertR system. It is mandatory in order to use AlertR. It uses SQLite as storage backend and a CSV file as user backend.", "type": "server"}}, "version": 2}