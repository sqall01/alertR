{
	"instances": {
		"alertClientDbus" : {
			"location": "alertClientDbus/",
			"name": "AlertR Alert Client Dbus",
			"desc": "This client handles triggered alerts and is written to show a message notification via D-Bus. It works with all window managers that support D-Bus and implement the freedesktop.org specification. For example, you can run it as a service on your workstation and as soon as an event happens (front door opens, door bell rings, service goes down, incoming phone call, and so on) it shows a notification on the display.",
			"type": "alert"
		},
		"alertClientExecuter": {
			"location": "alertClientExecuter/",
			"name": "AlertR Alert Client Executer",
			"desc": "This client handles triggered alerts and is written to execute a configured script or command with arguments. The arguments are configured and the command is executed on a triggered sensor alert event or when all alerts are stopped. For example, you can start a init script on a Linux system when a sensor alert was triggered and when all alerts are stopped the init script is stopped.",
			"type": "alert"
		},
		"alertClientMail": {
			"location": "alertClientMail/",
			"name": "AlertR Alert Client Mail",
			"desc": "This client handles triggered sensor alerts and is written to send an eMail to the configured address when it receives a sensor alert. It needs a local SMTP server (like postfix) to send an eMail. For each alert you configure, you can customize the eMail content by using template files. Special keywords will be replaced by information about the received sensor alert.",
			"type": "alert"
		},
		"alertClientPushNotification": {
			"location": "alertClientPushNotification/",
			"name": "AlertR Alert Client Push Notification",
			"desc": "This client handles triggered sensor alerts and is written to send an end-to-end encrypted push notification on the configured channel when it receives a sensor alert. It needs an account at https://alertr.de and the receiving devices to have the AlertR app installed. For each alert you configure, you can customize the message content by using template files. Special keywords will be replaced by information about the received sensor alert.",
			"type": "alert"
		},
		"alertClientRaspberryPi": {
			"location": "alertClientRaspberryPi/",
			"name": "AlertR Alert Client Raspberry Pi",
			"desc": "This client handles triggered alerts and is written to set/unset GPIO pins of a Raspberry Pi. This means it gets notified by the server if an alert was triggered by a sensor and can set/unset configured GPIO pins, for example, to activate a siren or something else.",
			"type": "alert"
		},
		"alertClientTemplate": {
			"location": "alertClientTemplate/",
			"name": "AlertR Alert Client Template",
			"desc": "This client handles triggered alerts and is solely for developers. It is a template which handles the communication with the server, but does not do any logic when a configured alert is triggered.",
			"type": "alert"
		},
		"alertClientKodi": {
			"location": "alertClientKodi/",
			"name": "AlertR Alert Client Kodi",
			"desc": "This client handles triggered alerts and is written to communicate with Kodi (former XBMC). It can show a message notification on the display and can pause video/audio playback (for now). For example, you can use this client to pause the video/audio playback and show a message notification if someone is ringing the bell at your front door.",
			"type": "alert"
		},
		"managerClientConsole": {
			"location": "managerClientConsole/",
			"name": "AlertR Manager Client Console",
			"desc": "This client is a manager client for the alert system. It shows the current state of all sensors, the sensor and alert clients and if the alert system is activated or not.",
			"type": "manager"
		},
		"managerClientKeypad": {
			"location": "managerClientKeypad/",
			"name": "AlertR Manager Client Keypad",
			"desc": "This client manages the state of the alarm system. It can activate or deactivate it. You have to enter a PIN before you can activate the alarm system, deactivate it or activate it with a configured delay. It is written to work as a client with keypad and small display (original for a Raspberry Pi, but is not limited to it). The client should be near an entrance to allow the user to activate/deactivate the alarm system when she leaves/enters.",
			"type": "manager"
		},
		"managerClientDatabase": {
			"location": "managerClientDatabase/",
			"name": "AlertR Manager Client Database",
			"desc": "This client stores the state of the alert system in a database for external usage. It uses a MySQL db to store all information about the alert system and events that occur (for example, a client that disconnected from the alert system). External components, such as a website, can use the information in the database for their purposes. In the case of a website, it can process the data and show a visualization to the user. In order to let external components interact with the alert system, the manager client contains a local UNIX socket server which can be contacted.",
			"type": "manager"
		},
		"sensorClientICalendar": {
			"location": "sensorClientICalendar/",
			"name": "AlertR Sensor Client iCalendar",
			"desc": "This client handles calendar services as a sensor. For this, reminders in this calendar are used to trigger sensor alerts. Every calendar service that gives the option to retrieve the calendar data as .ics file via an URL can be used with this sensor client. For example, you can combine this sensor client with your Google calendar to generate sensor alerts every time a reminder is triggered. These sensor alerts can then be instrumented by every AlertR alert client to perform a certain task (e.g., display a message on your Kodi media center setup).",
			"type": "sensor"
		},
		"sensorClientExecuter": {
			"location": "sensorClientExecuter/",
			"name": "AlertR Sensor Client Executer",
			"desc": "This client handles watchdog scripts as sensors and informs the server if a sensor has triggered and/or the state of a sensor has changed. This means it executes configured watchdog scripts in an interval that check a service. Each sensor is basically a cronjob for the AlertR system. The sensor has two options to be triggered: 1) The sensor is triggered if the watchdog script exits with an exit code not equal to 0 or a time out. 2) The watchdog script outputs that the sensor should be triggered with the help of a well-defined protocol or a time out (see the developer tutorials for examples). For instance, you can execute a script that checks if the Internet connection is available and which triggers a sensor alert if no Internet connection is up.",
			"type": "sensor"
		},
		"sensorClientDevelopment": {
			"location": "sensorClientDevelopment/",
			"name": "AlertR Sensor Client Development",
			"desc": "This client is only for developers. It has no purpose than to emulate sensors and to trigger them via keyboard input. This means it can not be used as a daemon and have to be actively used.",
			"type": "sensor"
		},
		"sensorClientFIFO": {
			"location": "sensorClientFIFO/",
			"name": "AlertR Sensor Client FIFO",
			"desc": "This client is build for the integration of already developed scripts or other software into the AlertR infrastructure as a sensor. For each sensor it creates a FIFO file on the file system and monitors it. Other scripts/programs can write into the FIFO file to change the state of the associated sensor. For example, you can use a cronjob to write into the FIFO file at specific times to trigger a sensor event, or use the ISC DHCP server to write into the FIFO file each time a client in a specific subnet requests an IP address.",
			"type": "sensor"
		},
		"sensorClientWeatherService": {
			"location": "sensorClientWeatherService/",
			"name": "AlertR Sensor Client Weather Service",
			"desc": "This client is specialized to fetch data from a weather service provider (wunderground.com or darksky.net) and provide the AlertR system with this information.",
			"type": "sensor"
		},
		"sensorClientPing": {
			"location": "sensorClientPing/",
			"name": "AlertR Sensor Client Ping",
			"desc": "This client is specialized to just ping a server as a sensor and informing the AlertR server if a pinged host is reachable or not. The sensor is triggered if the server is not reachable or a time out occur.",
			"type": "sensor"
		},
		"sensorClientRaspberryPi": {
			"location": "sensorClientRaspberryPi/",
			"name": "AlertR Sensor Client Raspberry Pi",
			"desc": "This client handles Raspberry Pi GPIO pins as sensors. It either polls the state of a GPIO pin or uses an interrupt on a falling/rising edge and triggers an alert if the state has changed/interrupt has occurred (or a state change if it goes back from a state in which it triggers an alert to a normal state). This means it notifies the server if an alert was triggered by a sensor. A sensor connected to the GPIO pin can be anything you like, for example, a PIR (Passive InfraRed) sensor, a magnetic switch on a window, a water leak alarm sensor, a smoke detector and so on.",
			"type": "sensor"
		},
		"server": {
			"location": "server/",
			"name": "AlertR Server",
			"desc": "This is the server that handles the logic of the alert system. It is mandatory in order to use AlertR. It uses either SQLite as storage backend and a CSV file as user backend.",
			"type": "server"
		}
	},
	"version": 2
}
